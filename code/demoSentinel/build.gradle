buildscript {
	ext {
		springBootVersion = '2.0.0.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

allprojects {
	apply plugin: 'java'
	apply plugin: 'maven-publish'

	configurations.all {
		// check for updates every build
		resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
	}

	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.java
			}
		}
	}
}

ext{
	lombokVersion = '1.16.16'
	log4jVersion = '2.11.2'
	springBootVersion = '1.4.3.RELEASE'
	jmockitVersion = '1.24'
	junitVersion = '4.12'

//	env = System.getProperty("env") == null ? "development" : System.getProperty("env")
}
repositories {
	mavenCentral()
	maven {
		url "https://plugins.gradle.org/m2/"
	}
}

subprojects {
	apply plugin: 'java'

	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"
	}

	configurations {
		all*.exclude group: "org.slf4j", module: "slf4j-log4j12"
		all*.exclude group: "org.slf4j", module: "log4j-over-slf4j"
		all*.exclude group: "log4j", module: "log4j"
		all*.exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
	}

	sourceSets {
		main {
			java {
				srcDirs = ["src/main/java"]
			}
			resources {
				srcDirs = ["src/main/resources/base", "src/main/resources"]
//				srcDirs = ["src/main/resources/base", "src/main/resources/$env"]
			}
		}
		test {
			java {
				srcDirs = ["src/test/java"]
			}
			resources {
				srcDirs = ["src/main/resources/base", "src/main/resources"]
//				srcDirs = ["src/test/resources/base", "src/test/resources/$env"]
			}
		}
	}

	repositories {
		mavenCentral()
	}

	dependencies {
		compile "org.springframework.boot:spring-boot-starter-parent:$springBootVersion"
        compile "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
		compile "org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2"
		compile "org.apache.logging.log4j:log4j-core:$log4jVersion"
		compile "org.apache.logging.log4j:log4j-api:$log4jVersion"
		compile "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"
		compile "org.projectlombok:lombok:$lombokVersion"
		compile "org.aspectj:aspectjweaver:1.8.6"
		// swagger
		compile "com.spring4all:swagger-spring-boot-starter:1.8.0.RELEASE"
		// sentinel
		compile "com.alibaba.csp:sentinel-core:1.6.0"
		compile "com.alibaba.csp:sentinel-transport-simple-http:1.6.0"

//		compile 'org.springframework.cloud:spring-cloud-starter-alibaba-sentinel:0.2.0.RELEASE'
//		compile "com.alibaba.csp:sentinel-reactor-adapter:1.6.0"

		runtime('mysql:mysql-connector-java')
		testCompile "org.jmockit:jmockit:$jmockitVersion"
		testCompile "junit:junit:$junitVersion"
		testCompile "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
	}

}

//
//dependencies {
//	compile('org.springframework.boot:spring-boot-starter-jdbc')
//	compile('org.springframework.boot:spring-boot-starter-web')
//	compile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2')
//	compile "org.projectlombok:lombok:$lombokVersion"
//	compile "org.apache.logging.log4j:log4j-core:$log4jVersion"
//	compile "org.apache.logging.log4j:log4j-api:$log4jVersion"
//	compile "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"
//
//	runtime('mysql:mysql-connector-java')
//	compileOnly('org.projectlombok:lombok')
//	testCompile('org.springframework.boot:spring-boot-starter-test')
//}
